type Chat @aws_iam @aws_api_key {
  id: ID!
  text: String!
  email: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelChatConnection @aws_api_key @aws_iam {
  items: [Chat]!
  nextToken: String
}

input ModelChatFilterInput {
  id: ModelIDInput
  text: ModelStringInput
  email: ModelStringInput
  and: [ModelChatFilterInput]
  or: [ModelChatFilterInput]
  not: ModelChatFilterInput
}

type Query {
  getChat(id: ID!): Chat @aws_api_key @aws_iam
  listChats(filter: ModelChatFilterInput, limit: Int, nextToken: String): ModelChatConnection @aws_api_key @aws_iam
}

input ModelChatConditionInput {
  text: ModelStringInput
  email: ModelStringInput
  and: [ModelChatConditionInput]
  or: [ModelChatConditionInput]
  not: ModelChatConditionInput
}

input CreateChatInput {
  id: ID
  text: String!
  email: String
}

input UpdateChatInput {
  id: ID!
  text: String
  email: String
}

input DeleteChatInput {
  id: ID!
}

type Mutation {
  createChat(input: CreateChatInput!, condition: ModelChatConditionInput): Chat @aws_api_key @aws_iam
  updateChat(input: UpdateChatInput!, condition: ModelChatConditionInput): Chat @aws_api_key @aws_iam
  deleteChat(input: DeleteChatInput!, condition: ModelChatConditionInput): Chat @aws_api_key @aws_iam
}

input ModelSubscriptionChatFilterInput {
  id: ModelSubscriptionIDInput
  text: ModelSubscriptionStringInput
  email: ModelSubscriptionStringInput
  and: [ModelSubscriptionChatFilterInput]
  or: [ModelSubscriptionChatFilterInput]
}

type Subscription {
  onCreateChat(filter: ModelSubscriptionChatFilterInput): Chat @aws_subscribe(mutations: ["createChat"]) @aws_api_key @aws_iam
  onUpdateChat(filter: ModelSubscriptionChatFilterInput): Chat @aws_subscribe(mutations: ["updateChat"]) @aws_api_key @aws_iam
  onDeleteChat(filter: ModelSubscriptionChatFilterInput): Chat @aws_subscribe(mutations: ["deleteChat"]) @aws_api_key @aws_iam
}
